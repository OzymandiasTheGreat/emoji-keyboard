/* automatically generated by rust-bindgen 0.59.2 */

pub const UIOHOOK_SUCCESS: u32 = 0;
pub const UIOHOOK_FAILURE: u32 = 1;
pub const UIOHOOK_ERROR_OUT_OF_MEMORY: u32 = 2;
pub const UIOHOOK_ERROR_X_OPEN_DISPLAY: u32 = 32;
pub const UIOHOOK_ERROR_X_RECORD_NOT_FOUND: u32 = 33;
pub const UIOHOOK_ERROR_X_RECORD_ALLOC_RANGE: u32 = 34;
pub const UIOHOOK_ERROR_X_RECORD_CREATE_CONTEXT: u32 = 35;
pub const UIOHOOK_ERROR_X_RECORD_ENABLE_CONTEXT: u32 = 36;
pub const UIOHOOK_ERROR_X_RECORD_GET_CONTEXT: u32 = 37;
pub const UIOHOOK_ERROR_SET_WINDOWS_HOOK_EX: u32 = 48;
pub const UIOHOOK_ERROR_GET_MODULE_HANDLE: u32 = 49;
pub const UIOHOOK_ERROR_AXAPI_DISABLED: u32 = 64;
pub const UIOHOOK_ERROR_CREATE_EVENT_PORT: u32 = 65;
pub const UIOHOOK_ERROR_CREATE_RUN_LOOP_SOURCE: u32 = 66;
pub const UIOHOOK_ERROR_GET_RUNLOOP: u32 = 67;
pub const UIOHOOK_ERROR_CREATE_OBSERVER: u32 = 68;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub const _event_type_EVENT_HOOK_ENABLED: _event_type = 1;
pub const _event_type_EVENT_HOOK_DISABLED: _event_type = 2;
pub const _event_type_EVENT_KEY_TYPED: _event_type = 3;
pub const _event_type_EVENT_KEY_PRESSED: _event_type = 4;
pub const _event_type_EVENT_KEY_RELEASED: _event_type = 5;
pub const _event_type_EVENT_MOUSE_CLICKED: _event_type = 6;
pub const _event_type_EVENT_MOUSE_PRESSED: _event_type = 7;
pub const _event_type_EVENT_MOUSE_RELEASED: _event_type = 8;
pub const _event_type_EVENT_MOUSE_MOVED: _event_type = 9;
pub const _event_type_EVENT_MOUSE_DRAGGED: _event_type = 10;
pub const _event_type_EVENT_MOUSE_WHEEL: _event_type = 11;
pub type _event_type = ::std::os::raw::c_uint;
pub use self::_event_type as event_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _keyboard_event_data {
    pub keycode: u16,
    pub rawcode: u16,
    pub keychar: u16,
}
#[test]
fn bindgen_test_layout__keyboard_event_data() {
    assert_eq!(
        ::std::mem::size_of::<_keyboard_event_data>(),
        6usize,
        concat!("Size of: ", stringify!(_keyboard_event_data))
    );
    assert_eq!(
        ::std::mem::align_of::<_keyboard_event_data>(),
        2usize,
        concat!("Alignment of ", stringify!(_keyboard_event_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_keyboard_event_data>())).keycode as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_keyboard_event_data),
            "::",
            stringify!(keycode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_keyboard_event_data>())).rawcode as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_keyboard_event_data),
            "::",
            stringify!(rawcode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_keyboard_event_data>())).keychar as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_keyboard_event_data),
            "::",
            stringify!(keychar)
        )
    );
}
pub type keyboard_event_data = _keyboard_event_data;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _mouse_event_data {
    pub button: u16,
    pub clicks: u16,
    pub x: i16,
    pub y: i16,
}
#[test]
fn bindgen_test_layout__mouse_event_data() {
    assert_eq!(
        ::std::mem::size_of::<_mouse_event_data>(),
        8usize,
        concat!("Size of: ", stringify!(_mouse_event_data))
    );
    assert_eq!(
        ::std::mem::align_of::<_mouse_event_data>(),
        2usize,
        concat!("Alignment of ", stringify!(_mouse_event_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_mouse_event_data>())).button as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_mouse_event_data),
            "::",
            stringify!(button)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_mouse_event_data>())).clicks as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_mouse_event_data),
            "::",
            stringify!(clicks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_mouse_event_data>())).x as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_mouse_event_data),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_mouse_event_data>())).y as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_mouse_event_data),
            "::",
            stringify!(y)
        )
    );
}
pub type mouse_event_data = _mouse_event_data;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _mouse_wheel_event_data {
    pub clicks: u16,
    pub x: i16,
    pub y: i16,
    pub type_: u8,
    pub amount: u16,
    pub rotation: i16,
    pub direction: u8,
}
#[test]
fn bindgen_test_layout__mouse_wheel_event_data() {
    assert_eq!(
        ::std::mem::size_of::<_mouse_wheel_event_data>(),
        14usize,
        concat!("Size of: ", stringify!(_mouse_wheel_event_data))
    );
    assert_eq!(
        ::std::mem::align_of::<_mouse_wheel_event_data>(),
        2usize,
        concat!("Alignment of ", stringify!(_mouse_wheel_event_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_mouse_wheel_event_data>())).clicks as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_mouse_wheel_event_data),
            "::",
            stringify!(clicks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_mouse_wheel_event_data>())).x as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_mouse_wheel_event_data),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_mouse_wheel_event_data>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_mouse_wheel_event_data),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_mouse_wheel_event_data>())).type_ as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_mouse_wheel_event_data),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_mouse_wheel_event_data>())).amount as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_mouse_wheel_event_data),
            "::",
            stringify!(amount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mouse_wheel_event_data>())).rotation as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_mouse_wheel_event_data),
            "::",
            stringify!(rotation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mouse_wheel_event_data>())).direction as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_mouse_wheel_event_data),
            "::",
            stringify!(direction)
        )
    );
}
pub type mouse_wheel_event_data = _mouse_wheel_event_data;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _uiohook_event {
    pub type_: event_type,
    pub time: u64,
    pub mask: u16,
    pub reserved: u16,
    pub data: _uiohook_event__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _uiohook_event__bindgen_ty_1 {
    pub keyboard: keyboard_event_data,
    pub mouse: mouse_event_data,
    pub wheel: mouse_wheel_event_data,
}
#[test]
fn bindgen_test_layout__uiohook_event__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_uiohook_event__bindgen_ty_1>(),
        14usize,
        concat!("Size of: ", stringify!(_uiohook_event__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_uiohook_event__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(_uiohook_event__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_uiohook_event__bindgen_ty_1>())).keyboard as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_uiohook_event__bindgen_ty_1),
            "::",
            stringify!(keyboard)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_uiohook_event__bindgen_ty_1>())).mouse as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_uiohook_event__bindgen_ty_1),
            "::",
            stringify!(mouse)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_uiohook_event__bindgen_ty_1>())).wheel as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_uiohook_event__bindgen_ty_1),
            "::",
            stringify!(wheel)
        )
    );
}
#[test]
fn bindgen_test_layout__uiohook_event() {
    assert_eq!(
        ::std::mem::size_of::<_uiohook_event>(),
        40usize,
        concat!("Size of: ", stringify!(_uiohook_event))
    );
    assert_eq!(
        ::std::mem::align_of::<_uiohook_event>(),
        8usize,
        concat!("Alignment of ", stringify!(_uiohook_event))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_uiohook_event>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_uiohook_event),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_uiohook_event>())).time as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_uiohook_event),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_uiohook_event>())).mask as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_uiohook_event),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_uiohook_event>())).reserved as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(_uiohook_event),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_uiohook_event>())).data as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_uiohook_event),
            "::",
            stringify!(data)
        )
    );
}
pub type uiohook_event = _uiohook_event;
pub type dispatcher_t = ::std::option::Option<unsafe extern "C" fn(_arg1: *mut uiohook_event)>;
extern "C" {
    pub fn hook_set_dispatch_proc(dispatch_proc: dispatcher_t);
}
extern "C" {
    pub fn hook_run() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hook_stop() -> ::std::os::raw::c_int;
}
